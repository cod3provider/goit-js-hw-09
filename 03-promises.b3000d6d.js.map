{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEgBC,SAASC,cAAc,SAC/BC,iBAAiB,UASzB,SAAuBC,GACrBA,EAAIC,iBAEJ,MAAMC,EAAO,CACXC,SAAUC,OAAOP,SAASC,cAAc,uBAAuBO,OAC/DC,QAASF,OAAOP,SAASC,cAAc,sBAAsBO,OAC7DE,UAAWH,OAAOP,SAASC,cAAc,wBAAwBO,QAGnE,IAAIF,SAAEA,EAAQG,QACRA,EAAOC,UACPA,GACAL,EAEN,IAAK,IAAIM,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EACnCC,EAAcD,EAAGL,GAChBO,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBjB,EAAAkB,OAAOC,QAAQ,uBAAqBH,QAAiBC,MAAWG,MAC/DC,OAAI,EAACL,SAAEA,EAAQC,MAAEA,MAClBjB,EAAAkB,OAAOI,QAAQ,sBAAoBN,QAAeC,MAAWG,MAC/DZ,GAAYG,EAEdN,EAAIkB,cAAcC,WA7BpB,MAAMJ,EAAkB,CACtBJ,SAAU,YACVS,cAAc,EACdC,QAAS,IACTC,kBAAmB,QA4BrB,SAASb,EAAcE,EAAUC,GAC/B,OAAO,IAAIW,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACpCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEb,E,MAAUC,IAEpBa,EAAO,C,SAAEd,E,MAAUC,MAEpBA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onSubmitForm);\n\nconst notiflixOptions = {\n  position: 'right-top',\n  clickToClose: true,\n  timeout: 3000,\n  cssAnimationStyle: 'zoom',\n}\n\nfunction onSubmitForm (evt) {\n  evt.preventDefault();\n\n  const refs = {\n    delayRef: Number(document.querySelector('input[name=\"delay\"]').value),\n    stepRef: Number(document.querySelector('input[name=\"step\"]').value),\n    amountRef: Number(document.querySelector('input[name=\"amount\"]').value),\n  }\n\n  let { delayRef,\n        stepRef,\n        amountRef\n    } = refs;\n\n  for (let i = 1; i <= amountRef; i += 1) {\n    createPromise(i, delayRef)\n    .then(({ position, delay}) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, notiflixOptions)})\n    .catch(({ position, delay}) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, notiflixOptions)});\n    delayRef += stepRef;\n  }\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n  });\n}\n\n"],"names":["$iQIUW","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","refs","delayRef","Number","value","stepRef","amountRef","i","$47d4ff9957288465$var$createPromise","then","position","delay","Notify","success","$47d4ff9957288465$var$notiflixOptions","catch","failure","currentTarget","reset","clickToClose","timeout","cssAnimationStyle","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.b3000d6d.js.map"}